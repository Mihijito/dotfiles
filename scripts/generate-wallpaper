#!/usr/bin/python3
from math import radians as rad, sqrt
from itertools import accumulate
from Tree.core import Tree
from PIL import Image
from random import randint, uniform, random

WALLPAPER_SIZE = (1920*2, 1080)

def triangular_cdf_inv(a, b, c, y):
    if 0 <= y <= (c-a)/(b-a):
        return a + sqrt(y*(b-a)*(c-a))
    elif (c-a)/(b-a) <= y <= 1:
        return b - sqrt((b-a)*(b-c))*sqrt(1-y)
    return c

def mountain_distribution_inverse(ab, x):
    ab.sort()

    triangle_probs = [(b-a)**2 for (a, b) in zip(ab[:-1], ab[1:])]
    # Choose mountain/triangle
    prob = x * sum(triangle_probs)
    passed = 0
    for (a, b) in zip(ab[:-1], ab[1:]):
        passed += (b-a)**2
        if prob <= passed:
            return triangular_cdf_inv(a, b, (a+b)/2, (prob-passed+(b-a)**2)/(b-a)**2)

if __name__ == "__main__":
    branches = []
    used_angles = [-130, 130]
    number_of_branches = 6

    for _ in range(number_of_branches):
        angle = mountain_distribution_inverse(used_angles, random())
        used_angles.append(angle)
        scale = .45 + randint(0, 10)/100
        branches.append((scale, rad(angle)))
    
    tree = Tree(
        pos=(0, 0, 0, -min(WALLPAPER_SIZE)*.40),
        branches=branches
    )
    tree.grow(6)

    tree.move_in_rectangle()

    im = Image.new("RGB", tree.get_size(), (59, 66, 82))
    tree.draw_on(im, (216, 222, 233, 236, 239, 244), (136, 192, 208), 10)

    wallpaper = Image.new("RGB", WALLPAPER_SIZE, (59, 66, 82))
    wallpaper.paste(im, ((wallpaper.size[0]-im.size[0])//4, (wallpaper.size[1]-im.size[1])//2))
    wallpaper.save("wallpaper.png", "PNG")